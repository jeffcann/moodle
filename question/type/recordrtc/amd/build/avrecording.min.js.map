{"version":3,"sources":["../src/avrecording.js"],"names":["define","Log","ModalFactory","checkCanWork","navigator","mediaDevices","window","MediaRecorder","location","protocol","host","indexOf","Recorder","type","mediaElement","noMediaPlaceholder","button","uploadProgressElement","otherControls","filename","owner","settings","recorder","mediaStream","mediaRecorder","chunks","bytesRecordedSoFar","secondsRemaining","countdownTicker","addEventListener","e","debug","preventDefault","dataset","state","startRecording","stopRecording","uploadMediaToServer","setUploadMessage","classList","remove","add","setOtherControlsEnabled","fetchRequest","XMLHttpRequest","open","src","responseType","handleRecordingFetched","send","disabled","hidePlayerDuringRecording","parentElement","textContent","mediaConstraints","getUserMedia","then","handleCaptureStarting","catch","handleCaptureFailed","stream","options","getRecordingOptions","ondataavailable","handleDataAvailable","onstop","handleRecordingHasStopped","start","srcObject","setAttribute","startCountdownTimer","focus","event","data","size","maxUploadSize","localStorage","getItem","setItem","showAlert","removeItem","push","M","core_formchangechecker","pathname","endsWith","set_form_changed","setTimeout","stopCountdownTimer","innerText","util","get_string","stop","tracks","getTracks","i","length","blob","Blob","mimeType","URL","createObjectURL","muted","controls","notifyRecordingComplete","error","stringName","name","replace","toLowerCase","timeLimit","innerHTML","updateTimerDisplay","setInterval","clearInterval","secs","mins","Math","round","querySelector","pad","val","valString","target","status","response","formData","FormData","append","cfg","sesskey","uploadRepositoryId","draftItemId","contextId","uploadRequest","handleUploadReadyStateChanged","upload","handleUploadProgress","handleUploadError","handleUploadAbort","wwwroot","readyState","loaded","total","langString","a","enabled","forEach","node","audioBitsPerSecond","parseInt","audioBitRate","videoBitsPerSecond","videoBitRate","mimeTypes","isTypeSupported","AudioSettings","audio","VideoSettings","video","width","ideal","height","RecordRtcQuestion","questionId","questionDiv","document","getElementById","result","typeInfo","recorderElements","querySelectorAll","rElement","recordingFilename","subject","create","types","ALERT","title","body","modal","show","init","js_pending","js_complete"],"mappings":"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","sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n//\n\n/**\n * JavaScript to the recording work.\n *\n * We would like to thank the creators of atto_recordrtc, whose\n * work inspired this.\n *\n * @package    qtype_recordrtc\n * @copyright  2019 The Open University\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\ndefine(['core/log', 'core/modal_factory'], function(Log, ModalFactory) {\n\n    /**\n     * Verify that the question type can work. If not, show a warning.\n     *\n     * @return {string} 'ok' if it looks OK, else 'nowebrtc' or 'nothttps' if there is a problem.\n     */\n    function checkCanWork() {\n        if (!(navigator.mediaDevices && window.MediaRecorder)) {\n            return 'nowebrtc';\n        }\n\n        if (!(location.protocol === 'https:' || location.host.indexOf('localhost') !== -1)) {\n            return 'nothttps';\n        }\n\n        return 'ok';\n    }\n\n    /**\n     * Object for actually doing the recording.\n     *\n     * The recorder can be in one of 4 states, which is stored in a data-state\n     * attribute on the button. The states are:\n     *  - new:       there is no recording yet. Button shows 'Start recording'.\n     *  - recording: buttons shows a countdown of remaining time. Media is being recorded.\n     *  - saving:    buttons shows a progress indicator.\n     *  - recorded:  button shows 'Record again'.\n     *\n     * @param {(AudioSettings|VideoSettings)} type\n     * @param {HTMLMediaElement} mediaElement\n     * @param {HTMLMediaElement} noMediaPlaceholder\n     * @param {HTMLButtonElement} button\n     * @param {HTMLElement} uploadProgressElement\n     * @param {NodeList} otherControls other controls to disable while recording is in progress.\n     * @param {string} filename the name of the audio (.ogg) or video file (.webm)\n     * @param {Object} owner\n     * @param {Object} settings\n     * @constructor\n     */\n    function Recorder(type, mediaElement, noMediaPlaceholder,\n                      button, uploadProgressElement,\n                      otherControls, filename, owner, settings) {\n        /**\n         * @type {Recorder} reference to this recorder, for use in event handlers.\n         */\n        var recorder = this;\n\n        /**\n         * @type {MediaStream} during recording, the stream of incoming media.\n         */\n        var mediaStream = null;\n\n        /**\n         * @type {MediaRecorder} the recorder that is capturing stream.\n         */\n        var mediaRecorder = null;\n\n        /**\n         * @type {Blob[]} the chunks of data that have been captured so far duing the current recording.\n         */\n        var chunks = [];\n\n        /**\n         * @type {number} number of bytes recorded so far, so we can auto-stop\n         * before hitting Moodle's file-size limit.\n         */\n        var bytesRecordedSoFar = 0;\n\n        /**\n         * @type {number} time left in seconds, so we can auto-stop at the time limit.\n         */\n        var secondsRemaining = 0;\n\n        /**\n         * @type {number} intervalID returned by setInterval() while the timer is running.\n         */\n        var countdownTicker = 0;\n\n        button.addEventListener('click', handleButtonClick);\n        this.uploadMediaToServer = uploadMediaToServer; // Make this method available.\n\n        /**\n         * Handles clicks on the start/stop button.\n         *\n         * @param {Event} e\n         */\n        function handleButtonClick(e) {\n            Log.debug('Start/stop button clicked.');\n            e.preventDefault();\n            switch (button.dataset.state) {\n                case 'new':\n                case 'recorded':\n                    startRecording();\n                    break;\n                case 'recording':\n                    stopRecording();\n                    break;\n            }\n        }\n\n        /**\n         * Start recording (because the button was clicked).\n         */\n        function startRecording() {\n            button.disabled = true;\n\n            if (type.hidePlayerDuringRecording) {\n                mediaElement.parentElement.classList.add('hide');\n                noMediaPlaceholder.classList.remove('hide');\n                noMediaPlaceholder.textContent = '';\n            } else {\n                mediaElement.parentElement.classList.remove('hide');\n                noMediaPlaceholder.classList.add('hide');\n            }\n            uploadProgressElement.classList.add('hide');\n\n            // Change look of recording button.\n            button.classList.remove('btn-outline-danger');\n            button.classList.add('btn-danger');\n\n            // Empty the array containing the previously recorded chunks.\n            chunks = [];\n            bytesRecordedSoFar = 0;\n            Log.debug('Audio question: Starting recording with media constraints');\n            Log.debug(type.mediaConstraints);\n            navigator.mediaDevices.getUserMedia(type.mediaConstraints)\n                .then(handleCaptureStarting)\n                .catch(handleCaptureFailed);\n        }\n\n        /**\n         * Callback once getUserMedia has permission from the user to access the recording devices.\n         *\n         * @param {MediaStream} stream the stream to record.\n         */\n        function handleCaptureStarting(stream) {\n            mediaStream = stream;\n\n            // Initialize MediaRecorder events and start recording.\n            var options = getRecordingOptions();\n            Log.debug('Audio question: creating recorder with opptions');\n            Log.debug(options);\n            mediaRecorder = new MediaRecorder(stream, options);\n\n            mediaRecorder.ondataavailable = handleDataAvailable;\n            mediaRecorder.onstop = handleRecordingHasStopped;\n            Log.debug('Audio question: starting recording.');\n            mediaRecorder.start(1000); // Capture in one-second chunks. Firefox requires that.\n\n            // Setup the UI for during recording.\n            mediaElement.srcObject = stream;\n            mediaElement.setAttribute('muted', '');\n            button.dataset.state = 'recording';\n            startCountdownTimer();\n\n            setOtherControlsEnabled(false);\n\n            // Make button clickable again, to allow stopping recording.\n            button.disabled = false;\n            button.focus();\n        }\n\n        /**\n         * Callback that is called by the media system for each Chunk of data.\n         *\n         * @param {BlobEvent} event\n         */\n        function handleDataAvailable(event) {\n            Log.debug('Audio question: chunk of ' + event.data.size + ' bytes received.');\n\n            // Check there is space to store the next chunk, and if not stop.\n            bytesRecordedSoFar += event.data.size;\n            if (settings.maxUploadSize >= 0 && bytesRecordedSoFar >= settings.maxUploadSize) {\n\n                // Extra check to avoid alerting twice.\n                if (!localStorage.getItem('alerted')) {\n                    localStorage.setItem('alerted', 'true');\n                    stopRecording();\n                    owner.showAlert('nearingmaxsize');\n\n                } else {\n                    localStorage.removeItem('alerted');\n                }\n            }\n\n            // Store the next chunk of data.\n            chunks.push(event.data);\n\n            // Notify form-change-checker that there is now unsaved data.\n            // But, don't do this in question preview where it is just annoying.\n            if (typeof M.core_formchangechecker !== 'undefined' &&\n                    !window.location.pathname.endsWith('/question/preview.php')) {\n                M.core_formchangechecker.set_form_changed();\n            }\n        }\n\n        /**\n         * Start recording (because the button was clicked or because we have reached a limit).\n         */\n        function stopRecording() {\n            // Disable the button while things change. Gets re-enabled once recording is underway.\n            button.disabled = true;\n            setTimeout(function() {\n                button.disabled = false;\n            }, 1000);\n\n            // Stop the count-down timer.\n            stopCountdownTimer();\n\n            // Update the button.\n            button.innerText = M.util.get_string('recordagain', 'qtype_recordrtc');\n            button.classList.remove('btn-danger');\n            button.classList.add('btn-outline-danger');\n\n            setOtherControlsEnabled(true);\n\n            // Ask the recording to stop.\n            Log.debug('Audio question: stopping recording.');\n            mediaRecorder.stop();\n\n            // Also stop each individual MediaTrack.\n            var tracks = mediaStream.getTracks();\n            for (var i = 0; i < tracks.length; i++) {\n                tracks[i].stop();\n            }\n        }\n\n        /**\n         * Callback that is called by the media system once recording has finished.\n         */\n        function handleRecordingHasStopped() {\n            // Set source of audio player.\n            Log.debug('Audio question: recording stopped.');\n            var blob = new Blob(chunks, {type: mediaRecorder.mimeType});\n            mediaElement.srcObject = null;\n            mediaElement.src = URL.createObjectURL(blob);\n\n            // Show audio player with controls enabled, and unmute.\n            mediaElement.muted = false;\n            mediaElement.controls = true;\n            mediaElement.parentElement.classList.remove('hide');\n            noMediaPlaceholder.classList.add('hide');\n            mediaElement.focus();\n\n            button.innerText = M.util.get_string('recordagain', 'qtype_recordrtc');\n            button.disabled = false;\n            button.classList.remove('btn-danger');\n            button.classList.add('btn-outline-danger');\n            button.dataset.state = 'recorded';\n\n            if (chunks.length > 0) {\n                owner.notifyRecordingComplete(recorder);\n            }\n        }\n\n        /**\n         * Function that handles errors from the recorder.\n         *\n         * @param {DOMException} error\n         */\n        function handleCaptureFailed(error) {\n            Log.debug('Audio question: error received');\n            Log.debug(error);\n\n            button.innerText = M.util.get_string('recordingfailed', 'qtype_recordrtc');\n            button.disabled = false;\n            button.classList.remove('btn-danger');\n            button.classList.add('btn-outline-danger');\n            button.dataset.state = 'new';\n\n            // Changes 'CertainError' -> 'gumcertain' to match language string names.\n            var stringName = 'gum' + error.name.replace('Error', '').toLowerCase();\n\n            owner.showAlert(stringName);\n        }\n\n        /**\n         * Start the countdown timer from settings.timeLimit.\n         */\n        function startCountdownTimer() {\n            secondsRemaining = settings.timeLimit + 1;\n\n            button.innerHTML = M.util.get_string('stoprecording', 'qtype_recordrtc') + ' (<span></span>)';\n            updateTimerDisplay();\n            countdownTicker = setInterval(updateTimerDisplay, 1000);\n        }\n\n        /**\n         * Stop the countdown timer.\n         */\n        function stopCountdownTimer() {\n            if (countdownTicker !== 0) {\n                clearInterval(countdownTicker);\n                countdownTicker = 0;\n            }\n        }\n\n        /**\n         * Update the countdown timer, and stop recording if we have reached 0.\n         */\n        function updateTimerDisplay() {\n            secondsRemaining -= 1;\n\n            var secs = secondsRemaining % 60;\n            var mins = Math.round((secondsRemaining - secs) / 60);\n            button.querySelector('span').innerText = pad(mins) + ':' + pad(secs);\n\n            if (secondsRemaining === 0) {\n                stopRecording();\n            }\n        }\n\n        /**\n         * Zero-pad a string to be at least two characters long.\n         *\n         * Used fro\n         * @param {number} val, e.g. 1 or 10\n         * @return {string} e.g. '01' or '10'.\n         */\n        function pad(val) {\n            var valString = val + '';\n\n            if (valString.length < 2) {\n                return '0' + valString;\n            } else {\n                return valString;\n            }\n        }\n\n        /**\n         * Upload the recorded media back to Moodle.\n         */\n        function uploadMediaToServer() {\n            setUploadMessage('uploadpreparing');\n            uploadProgressElement.classList.remove('hide');\n            noMediaPlaceholder.classList.add('hide');\n            setOtherControlsEnabled(false);\n\n            var fetchRequest = new XMLHttpRequest();\n\n            // Get media of audio/video tag.\n            fetchRequest.open('GET', mediaElement.src);\n            fetchRequest.responseType = 'blob';\n            fetchRequest.addEventListener('load', handleRecordingFetched);\n            fetchRequest.send();\n        }\n\n        /**\n         * Callback called once we have the data from the media element.\n         *\n         * @param {ProgressEvent} e\n         */\n        function handleRecordingFetched(e) {\n            var fetchRequest = e.target;\n            if (fetchRequest.status !== 200) {\n                // No data.\n                return;\n            }\n\n            // Blob is now the media that the audio/video tag's src pointed to.\n            var blob = fetchRequest.response;\n\n            // Create FormData to send to PHP filepicker-upload script.\n            var formData = new FormData();\n            formData.append('repo_upload_file', blob, filename);\n            formData.append('sesskey', M.cfg.sesskey);\n            formData.append('repo_id', settings.uploadRepositoryId);\n            formData.append('itemid', settings.draftItemId);\n            formData.append('savepath', '/');\n            formData.append('ctx_id', settings.contextId);\n            formData.append('overwrite', 1);\n\n            var uploadRequest = new XMLHttpRequest();\n            uploadRequest.addEventListener('readystatechange', handleUploadReadyStateChanged);\n            uploadRequest.upload.addEventListener('progress', handleUploadProgress);\n            uploadRequest.addEventListener('error', handleUploadError);\n            uploadRequest.addEventListener('abort', handleUploadAbort);\n            uploadRequest.open('POST', M.cfg.wwwroot + '/repository/repository_ajax.php?action=upload');\n            uploadRequest.send(formData);\n        }\n\n        /**\n         * Callback for when the upload completes.\n         * @param {ProgressEvent} e\n         */\n        function handleUploadReadyStateChanged(e) {\n            var uploadRequest = e.target;\n            if (uploadRequest.readyState === 4 && uploadRequest.status === 200) {\n                // When request finished and successful.\n                setUploadMessage('uploadcomplete');\n            } else if (uploadRequest.status === 404) {\n                setUploadMessage('uploadfailed404');\n            }\n            setOtherControlsEnabled(true);\n        }\n\n        /**\n         * Callback for updating the upload progress.\n         * @param {ProgressEvent} e\n         */\n        function handleUploadProgress(e) {\n            setUploadMessage('uploadprogress', Math.round(e.loaded / e.total * 100) + '%');\n        }\n\n        /**\n         * Callback for when the upload fails with an error.\n         */\n        function handleUploadError() {\n            setUploadMessage('uploadfailed');\n        }\n\n        /**\n         * Callback for when the upload fails with an error.\n         */\n        function handleUploadAbort() {\n            setUploadMessage('uploadaborted');\n        }\n\n        /**\n         * Display a progress message in the upload progress area.\n         *\n         * @param {string} langString\n         * @param {Object|String} a optional variable to populate placeholder with\n         */\n        function setUploadMessage(langString, a) {\n            uploadProgressElement.querySelector('small').innerText =\n                    M.util.get_string(langString, 'qtype_recordrtc', a);\n        }\n\n        /**\n         * Set the state of the otherControls to enabled or disabled.\n         *\n         * @param {boolean} enabled true to enable. False to disable.\n         */\n        function setOtherControlsEnabled(enabled) {\n            otherControls.forEach(function(node) {\n                node.disabled = !enabled;\n            });\n        }\n\n        /**\n         * Select best options for the recording codec.\n         *\n         * @returns {Object}\n         */\n        function getRecordingOptions() {\n            var options = {};\n\n            // Get the relevant bit rates from settings.\n            options.audioBitsPerSecond = parseInt(settings.audioBitRate, 10);\n            if (type.name === 'video') {\n                options.videoBitsPerSecond = parseInt(settings.videoBitRate, 10);\n            }\n\n            // Go through our list of mimeTypes, and take the first one that will work.\n            for (var i = 0; i < type.mimeTypes.length; i++) {\n                if (MediaRecorder.isTypeSupported(type.mimeTypes[i])) {\n                    options.mimeType = type.mimeTypes[i];\n                    break;\n                }\n            }\n\n            return options;\n        }\n    }\n\n    /**\n     * Fixed object which has the info specific to recording audio.\n     * @type {Object}\n     */\n    var AudioSettings = {\n        name: 'audio',\n        hidePlayerDuringRecording: true,\n        mediaConstraints: {\n            audio: true\n        },\n        mimeTypes: [\n            'audio/webm;codecs=opus',\n            'audio/ogg;codecs=opus'\n        ]\n    };\n\n    /**\n     * Fixed object which has the info specific to recording video.\n     * @type {Object}\n     */\n    var VideoSettings = {\n        name: 'video',\n        hidePlayerDuringRecording: false,\n        mediaConstraints: {\n            audio: true,\n            video: {\n                width: {ideal: 640},\n                height: {ideal: 480}\n            }\n        },\n        mimeTypes: [\n            'video/webm;codecs=vp9,opus',\n            'video/webm;codecs=h264,opus',\n            'video/webm;codecs=vp8,opus'\n        ]\n    };\n\n    /**\n     * Represents one record audio (or video) question.\n     *\n     * @param {string} questionId id of the outer question div.\n     * @param {Object} settings like audio bit rate.\n     * @param {string} type 'audio' or 'video'.\n     * @constructor\n     */\n    function RecordRtcQuestion(questionId, settings, type) {\n        var questionDiv = document.getElementById(questionId);\n\n        // Check if the RTC API can work here.\n        var result = checkCanWork();\n        if (result === 'nothttps') {\n            questionDiv.querySelector('.https-warning').classList.remove('hide');\n            return;\n        } else if (result === 'nowebrtc') {\n            questionDiv.querySelector('.no-webrtc-warning').classList.remove('hide');\n            return;\n        }\n\n        // Get the appropriate options.\n        var typeInfo;\n        if (type === 'audio') {\n            typeInfo = AudioSettings;\n        } else {\n            typeInfo = VideoSettings;\n        }\n\n        // We may have more than one widget in a question.\n        var recorderElements = questionDiv.querySelectorAll('.record-widget');\n        recorderElements.forEach (function(rElement) {\n            // Get the key UI elements.\n            var button = rElement.querySelector('.record-button button');\n            var mediaElement = rElement.querySelector('.media-player ' + type);\n            var noMediaPlaceholder = rElement.querySelector('.no-recording-placeholder');\n            var uploadProgressElement = rElement.querySelector('.saving-message');\n            var otherControls = rElement.querySelectorAll('input.submit[type=submit]');\n            var filename = rElement.dataset.recordingFilename;\n\n            // Make the callback functions available.\n            this.showAlert = showAlert;\n            this.notifyRecordingComplete = notifyRecordingComplete;\n\n            // Create the recorder.\n            new Recorder(typeInfo, mediaElement, noMediaPlaceholder, button,\n                    uploadProgressElement, otherControls, filename, this, settings);\n        });\n\n        /**\n         * Show a modal alert.\n         *\n         * @param {string} subject Subject is the content of the alert (which error the alert is for).\n         * @return {Promise}\n         */\n        function showAlert(subject) {\n            return ModalFactory.create({\n                type: ModalFactory.types.ALERT,\n                title: M.util.get_string(subject + '_title', 'qtype_recordrtc'),\n                body: M.util.get_string(subject, 'qtype_recordrtc'),\n            }).then(function(modal) {\n                modal.show();\n                return modal;\n            });\n        }\n\n        /**\n         * Callback called when the recofding is\n         *\n         * @param {Recorder} recorder the recorder.\n         */\n        function notifyRecordingComplete(recorder) {\n            recorder.uploadMediaToServer();\n        }\n    }\n\n    return {\n        /**\n         * Initialise a record audio (or video) question.\n         *\n         * @param {string} questionId id of the outer question div.\n         * @param {Object} settings like audio bit rate.\n         * @param {string} type 'audio' or 'video'.\n         */\n        init: function(questionId, settings, type) {\n            M.util.js_pending('init-' + questionId);\n            new RecordRtcQuestion(questionId, settings, type);\n            M.util.js_complete('init-' + questionId);\n        }\n    };\n});\n"],"file":"avrecording.min.js"}